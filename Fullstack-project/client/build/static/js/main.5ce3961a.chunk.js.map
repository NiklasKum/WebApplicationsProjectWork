{"version":3,"sources":["components/BookForm.js","components/BookView.js","App.js","reportWebVitals.js","index.js"],"names":["BookForm","useState","nametxt","setNametxt","authortxt","setAuthortxt","pagesI","setPagesI","onSubmit","event","preventDefault","alert","fetch","method","headers","body","JSON","stringify","name","author","pages","parseInt","then","response","json","data","console","log","type","id","value","onChange","e","target","BookView","bookName","useParams","setBookInfo","isMounted","useEffect","mounted","a","doStuff","App","className","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNA2DeA,MAxDf,WAEI,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KAsBA,OACI,8BACI,uBAAMC,SArBO,SAACC,GAClBA,EAAMC,iBACNC,MAAM,SAAST,EAAQ,kBACvBU,MAAM,YAAa,CACfC,OAAQ,OACRC,QAAS,CAAC,eAAe,oBACzBC,KAAMC,KAAKC,UAAU,CACjBC,KAAMhB,EACNiB,OAAQf,EACRgB,MAAOC,SAASf,OAGvBgB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIC,QAAQC,IAAIF,MAC1BtB,EAAW,IACXE,EAAa,IACbE,EAAU,KAKN,UACI,8BACI,0CAEI,uBAAOqB,KAAK,OAAOC,GAAG,OAAOC,MAAO5B,EAAS6B,SAAU,SAACC,GAAD,OAAO7B,EAAW6B,EAAEC,OAAOH,eAI1F,8BACI,4CAEI,uBAAOF,KAAK,OAAOC,GAAG,SAASC,MAAO1B,EAAW2B,SAAU,SAACC,GAAD,OAAO3B,EAAa2B,EAAEC,OAAOH,eAIhG,8BACI,2CAEI,uBAAOF,KAAK,OAAOC,GAAG,QAAQC,MAAOxB,EAAQyB,SAAU,SAACC,GAAD,OAAOzB,EAAUyB,EAAEC,OAAOH,eAIzF,uBAAOF,KAAK,SAASC,GAAG,SAASC,MAAM,iB,sCCRxCI,MAxCf,WACI,MAA8BjC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KACO4B,EAAYC,cAAZD,SAEDE,EAAc,SAACZ,EAAMa,GACpBA,IACCnC,EAAWsB,EAAK,GAAGP,MACnBb,EAAaoB,EAAK,GAAGN,QACrBZ,EAAUkB,EAAK,GAAGL,SAmB1B,OAdAmB,qBAAU,WACN,IAAIC,GAAU,EADF,4CAEZ,sBAAAC,EAAA,sEACU7B,MAAM,aAAcuB,GACzBb,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIY,EAAYZ,EAAMe,MAHpC,4CAFY,sBASZ,OATY,mCAOZE,GAEO,WACHF,GAAU,KAEf,IAGC,gCACI,uCACA,6BAAKtC,IACL,6BAAKE,IACL,6BAAKE,QCAFqC,MAhCf,WACE,OACE,cAAC,IAAD,UACE,qBAAKC,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,QACZ,qCACA,uCACA,cAAC,EAAD,SAIF,cAAC,IAAD,CAAOD,KAAK,kBAAkBC,QAC5B,mCACA,cAAC,EAAD,QAIF,cAAC,IAAD,CAAOD,KAAK,IAAIC,QACd,qCACA,qCACA,yFChBCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5ce3961a.chunk.js","sourcesContent":["\r\nimport {useState} from \"react\";\r\n\r\nfunction BookForm(){\r\n\r\n    const [nametxt, setNametxt] = useState('');\r\n    const [authortxt, setAuthortxt] = useState('');\r\n    const [pagesI, setPagesI] = useState('');\r\n\r\n\r\n    const handleSubmit = (event) =>{\r\n        event.preventDefault();\r\n        alert(\"Book: \"+nametxt+\" was submitted\");\r\n        fetch(\"/api/book\", {\r\n            method: \"POST\",\r\n            headers: {\"Content-type\":\"application/json\"},\r\n            body: JSON.stringify({\r\n                name: nametxt,\r\n                author: authortxt,\r\n                pages: parseInt(pagesI)\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => console.log(data));\r\n        setNametxt(\"\");\r\n        setAuthortxt(\"\");\r\n        setPagesI(\"\");\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <label>\r\n                        Name:\r\n                        <input type=\"text\" id=\"name\" value={nametxt} onChange={(e) => setNametxt(e.target.value)}/>\r\n                    </label>\r\n                </div>\r\n                \r\n                <div>\r\n                    <label>\r\n                        Author:\r\n                        <input type=\"text\" id=\"author\" value={authortxt} onChange={(e) => setAuthortxt(e.target.value)}/>\r\n                    </label>\r\n                </div>\r\n                \r\n                <div>\r\n                    <label>\r\n                        Pages:\r\n                        <input type=\"text\" id=\"pages\" value={pagesI} onChange={(e) => setPagesI(e.target.value)}/>\r\n                    </label>\r\n                </div>\r\n                \r\n                <input type=\"submit\" id=\"submit\" value=\"Submit\" />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BookForm","import React, {useState, useEffect} from \"react\";\r\nimport {\r\n    useParams\r\n  } from \"react-router-dom\";\r\n\r\nfunction BookView(){\r\n    const [nametxt, setNametxt] = useState('');\r\n    const [authortxt, setAuthortxt] = useState('');\r\n    const [pagesI, setPagesI] = useState('');\r\n    const {bookName} = useParams();\r\n\r\n    const setBookInfo = (data, isMounted) =>{\r\n        if(isMounted){\r\n            setNametxt(data[0].name);\r\n            setAuthortxt(data[0].author);\r\n            setPagesI(data[0].pages);\r\n        }\r\n    }\r\n\r\n    \r\n    useEffect(() => {\r\n        let mounted = true;\r\n        async function doStuff(){\r\n            await fetch(\"/api/book/\"+{bookName}.bookName)\r\n            .then(response => response.json())\r\n            .then(data => setBookInfo(data, mounted))\r\n        }\r\n        doStuff();\r\n\r\n        return () => {\r\n            mounted = false;\r\n        }\r\n    }, [])\r\n    \r\n    return(\r\n        <div>\r\n            <h1>Books</h1>\r\n            <h3>{nametxt}</h3>\r\n            <h3>{authortxt}</h3>\r\n            <h3>{pagesI}</h3>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default BookView","\nimport './App.css';\nimport BookForm from './components/BookForm';\nimport {BrowserRouter as Router, Route, Routes} from \"react-router-dom\";\nimport BookView from './components/BookView';\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Routes>\n          <Route path=\"/\" element={\n              <>\n              <h1>books</h1>\n              <BookForm />\n              </>\n            }\n            />\n            <Route path=\"/book/:bookName\" element={\n              <>\n              <BookView />\n              </>\n            }\n            />\n            <Route path=\"*\" element={\n              <>\n              <h1>404</h1>\n              <p>this is not the webpage you are looking for</p>\n              </>\n            }\n            />\n        </Routes>\n      </div>\n    </Router>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}